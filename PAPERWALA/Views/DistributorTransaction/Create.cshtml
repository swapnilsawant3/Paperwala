@model PAPERWALA.Models.DistributorTransactionDTO
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutAdminMain.cshtml";
}

<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-1.8.2.min.js"></script>


<script type="text/javascript">
    $(document).ready(function () {

        $("#PaperId").change(function () {
           
            $("#PaperRate").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetPaperRate")',
                dataType: 'json',
                data: { PaperId: $("#PaperId").val(), Tdate: $("#TransDate").val() },
                
                success: function (PaperRatedata) {
                    document.getElementById('PaperRate').value = PaperRatedata;
                },
                error: function (ex) {
                    alert('No Record Found For This Paper Please Select Another Paper');
                    document.getElementById('PaperRate').value = 0.0;
                }
            });
            return false;
        })


    });

</script>

<script type="text/javascript">
    function AllCalculation()
    {
        
        var TxPaperRate = document.getElementById('PaperRate').value;
        var TxPaperQuantity = document.getElementById('PaperQuantity').value;
        var TotalPriceR = parseFloat(TxPaperRate) * parseFloat(TxPaperQuantity);
       
        document.getElementById('TotalPrice').value = TotalPriceR.toFixed(2);
        var TxPamphletQuantity = document.getElementById('PamphletQuantity').value;
        var TxPamphletRate = document.getElementById('PamphletRate').value;
        var TxPaperQuantity = document.getElementById('PaperQuantity').value;
        var TotalPamphletAmountR = (parseFloat(TxPamphletQuantity) * parseFloat(TxPaperQuantity)) * parseFloat(TxPamphletRate);
        document.getElementById('TotalPamphletAmount').value = TotalPamphletAmountR.toFixed(2);
        var TxTotalPrice = document.getElementById('TotalPrice').value;
        var TxTotalPamphletAmount = document.getElementById('TotalPamphletAmount').value;
        var TotalFinalAmountR = parseFloat(TxTotalPrice) - parseFloat(TxTotalPamphletAmount);
        document.getElementById('TotalFinalAmount').value = TotalFinalAmountR.toFixed(2);

        var TxTotalFinalAmount = document.getElementById('TotalFinalAmount').value;
        var TxPaidAmount = document.getElementById('PaidAmount').value;
        var BalanceAmountR = parseFloat(TxTotalFinalAmount) - parseFloat(TxPaidAmount);
        document.getElementById('BalanceAmount').value = BalanceAmountR.toFixed(2);
        var TxBalanceAmount = document.getElementById('BalanceAmount').value;
        var TxPrvBalanceAmount = document.getElementById('PrvBalanceAmount').value;
        var FinalBalaceAmountR = parseFloat(TxBalanceAmount) + parseFloat(TxPrvBalanceAmount);
        document.getElementById('FinalBalaceAmount').value = FinalBalaceAmountR.toFixed(2);
    }
</script>

<script type="text/javascript">
    $(document).ready(function () {

        $("#RetailerId").change(function () {

            $("#PrvBalanceAmount").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetRetailerPrevBal")',
                dataType: 'json',
                data: { RetailerId: $("#RetailerId").val() },

                success: function (RetailerPrevBaldata) {
                    document.getElementById('PrvBalanceAmount').value = RetailerPrevBaldata;
                },
                error: function (ex) {
                    alert('No Record Found For This Retailer Please Select Another Retailer');
                    document.getElementById('PrvBalanceAmount').value = 0.0;
                }
            });
            return false;
        })


    });

</script>


<div class="page-header">
    <div class="row align-items-end">
        <div class="col-lg-8">
            <div class="page-header-title">
                <i class="ik ik-edit bg-blue"></i>
                <div class="d-inline">
                    <h5>Create Distributor Transaction</h5>
                    <span>You can create Retailer Transaction  with the help of Distributorship</span>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="col-lg-8">
    @if (TempData["MessageRegistration"] != null)
            {
        <div class="alert  alert-success alert-dismissible" role="alert">
            @*<span class="badge badge-pill badge-success">Success</span>*@@TempData["MessageRegistration"]
            <button type="button" onclick="showSuccessToast()" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
    }
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header"><h3>Distributor Transaction</h3></div>
            <div class="card-body">
                <div class="forms-sample">


                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="row">
                            <div class="form-group col-lg-4">
                                @Html.LabelFor(model => model.TransDate)
                                @Html.TextBoxFor(model => model.TransDate, new { @class = "form-control",@type = "date" })
                                @Html.ValidationMessageFor(model => model.TransDate, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-lg-4">
                                @Html.LabelFor(model => model.RetailerId)
                                @Html.DropDownListFor(model => model.RetailerId, new SelectList(Model.ListRetailer, "RetailerId", "RetailerName"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.RetailerId, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-lg-4">
                                @Html.LabelFor(model => model.PaperId)
                                @Html.DropDownListFor(model => model.PaperId, new SelectList(Model.ListPaperbyCityId, "PaperId", "PaperName"), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PaperId, "", new { @class = "text-danger" })
                            </div>
                       </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.PaperRate)
                            @Html.TextBoxFor(model => model.PaperRate, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PaperRate, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.PaperQuantity)
                            @Html.TextBoxFor(model => model.PaperQuantity, new { @class = "form-control", @onchange = "AllCalculation()" })
                            @Html.ValidationMessageFor(model => model.PaperQuantity, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.TotalPrice)
                            @Html.TextBoxFor(model => model.TotalPrice, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.TotalPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.PamphletQuantity)
                            @Html.TextBoxFor(model => model.PamphletQuantity, new { @class = "form-control", @onchange = "AllCalculation()" })
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.PamphletRate)
                            @Html.TextBoxFor(model => model.PamphletRate, new { @class = "form-control", @Value = ".25" })
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.TotalPamphletAmount)
                            @Html.TextBoxFor(model => model.TotalPamphletAmount, new { @class = "form-control" })
                        </div>
                  </div>
                <div class="row">
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.TotalFinalAmount)
                        @Html.TextBoxFor(model => model.TotalFinalAmount, new { @class = "form-control",@onchange= "AllCalculation()" })
                        @Html.ValidationMessageFor(model => model.TotalFinalAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.PaidAmount)
                        @Html.TextBoxFor(model => model.PaidAmount, new { @class = "form-control",@onkeyup= "AllCalculation()" })
                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-lg-4">
                        @Html.LabelFor(model => model.BalanceAmount)
                        @Html.TextBoxFor(model => model.BalanceAmount, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BalanceAmount, "", new { @class = "text-danger" })
                    </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.PrvBalanceAmount)
                            @Html.TextBoxFor(model => model.PrvBalanceAmount, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PrvBalanceAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-lg-4">
                            @Html.LabelFor(model => model.FinalBalaceAmount)
                            @Html.TextBoxFor(model => model.FinalBalaceAmount, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FinalBalaceAmount, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-lg-4">
                            <button class="btn btn-primary" type="submit" style="margin-top: 30px;"><i class="ik ik-clipboard"></i> Submit </button>
                            @Html.ActionLink("All Transaction", "Details", "DistributorTransaction", null, new { @class = "btn btn-danger",@style= "margin-top: 30px;" })
                        </div>
                   </div>

                    }

                        </div>



            </div>
        </div>
    </div>
</div>

